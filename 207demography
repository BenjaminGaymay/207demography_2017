#!/usr/bin/env python3

import sys
import csv
from pprint import pprint
from operator import add

def load_csv(filename):
	"""
	Loads CSV in datas and returns it
	"""
	datas = []
	with open(filename, 'r') as csv_file:
		csv_reader = csv.reader(csv_file, delimiter=';')
		next(csv_reader)
		for row in csv_reader:
			datas.append(row)
	return datas


def usage():
	"""
	Print usage !
	"""
	print("""USAGE
	./207demography code1 [...]
DESCRIPTION
	code1 country code""")


def show_countries(countries):
	"""
	Show countries selected
	"""
	i = 0
	print("country:  ", end="")
	for country in countries:
		if i + 1 == len(countries):
			print(country[0])
		else:
			print("{}, ".format(country[0]), end="")
		i += 1

def formula(val1, val2):

	x1 = x2 = y1 = y2 = 0
	for i in range(51):
		x1 += val1[i]
		y1 += val2[i]
		x2 += val1[i] ** 2
		y2 += val1[i] * val2[i]
	res1 = (51 * y2 - x1 * y1) / (51 * x2 - pow(x1, 2))
	res2 = (y1 * x2 - x1 * y2) / (51 * x2 - pow(x1, 2))
	return res1, res2


def linear_adjustment_a(years, population):

	# year : x / pop : y
	n = len(population) if len(population) > len(years) else len(years)
	xy = xSum = ySum = xSquare = 0
	for i in range(n):
		xy += years[i] * population[i]
		xSum += years[i]
		ySum += population[i]
		xSquare += years[i] ** 2
	return (n * xy - xSum * ySum) / (n * xSquare - xSum ** 2) / 1000000


def linear_adjustment_b(years, population):

	# year : x / pop : y
	n = len(population) if len(population) > len(years) else len(years)
	xy = xSum = ySum = xSquare = 0
	for i in range(n):
		xy += years[i] * population[i]
		xSum += years[i]
		ySum += population[i]
		xSquare += years[i] ** 2
	return abs((ySum * xSquare - xSum * xy) / (n * xSquare - xSum ** 2) / 1000000)


def merge_list(lists):
	new_list = [sum(x) for x in zip(*lists)]
	return new_list


def fit1(countries):
	"""
	Fit 1
	"""
	years = [1961 + x for x in range(51)]
	populations = []
	for country in countries:
		populations.append([float(x) for x in country[2:]])
	populations = merge_list(populations)
	a = linear_adjustment_a(years, populations)
	b = linear_adjustment_b(years, populations)
	print("fit 1\n\tY = {:.2f} X - {:.2f}".format(a, b))

	# std = 0
	# for i in range(51):
	# 	std += (population[i] - (res1 * years[i] + res2)) ** 2
	# mdr = std ** 0.5
	# res1, res2 = formula(years, populations)
	print()


def fit2(countries):
	"""
	Fit 2
	"""
	print("fit 2")


def correlation(countries):
	"""
	Correlation
	"""
	print("correlation")


def tomaredouble(datas, av):
	"""
	Toma redouble
	"""
	countries = []
	for country in av:
		for row in datas:
			if len(row) > 2 and row[1] == country:
				countries.append(row)
	show_countries(countries)
	fit1(countries)
	fit2(countries)
	correlation(countries)


def main():
	"""
	Main function
	"""
	av = sys.argv
	av.pop(0)
	if (len(av) < 1):
		return 84
	elif av[0] in ['-h', '--help']:
		return usage()
	try:
		datas = load_csv("207demography_data.csv")
	except Exception as err:
		print(err)
		return 84
	tomaredouble(datas, av)
	return 0


if __name__ == '__main__':
	sys.exit(main())